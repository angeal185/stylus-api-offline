{"bifs":"<div class=\"docs\"><h1>Built-in Functions</h1><h2 id=\"redcolor-value\">red(color[, value])</h2><p>Return the red component of the given <code class=\"highlighter-rouge\">color</code>, or set the red component to the optional second <code class=\"highlighter-rouge\">value</code> argument.</p><div><pre><code> red(#c00)\n// =&gt; 204\n\nred(#000, 255)\n// =&gt; #f00\n</code></pre></div><h2 id=\"greencolor-value\">green(color[, value])</h2><p>Return the green component of the given <code class=\"highlighter-rouge\">color</code>, or set the green component to the optional second <code class=\"highlighter-rouge\">value</code> argument.</p><div><pre><code> green(#0c0)\n// =&gt; 204\n\ngreen(#000, 255)\n// =&gt; #0f0\n</code></pre></div><h2 id=\"bluecolor-value\">blue(color[, value])</h2><p>Return the blue component of the given <code class=\"highlighter-rouge\">color</code>, or set the blue component to the optional second <code class=\"highlighter-rouge\">value</code> argument.</p><div><pre><code> blue(#00c)\n// =&gt; 204\n\nblue(#000, 255)\n// =&gt; #00f\n</code></pre></div><h2 id=\"alphacolor-value\">alpha(color[, value])</h2><p>Return the alpha component of the given <code class=\"highlighter-rouge\">color</code>, or set the alpha component to the optional second <code class=\"highlighter-rouge\">value</code> argument.</p><div><pre><code>  alpha(#fff)\n // =&gt; 1\n\n alpha(rgba(0,0,0,0.3))\n // =&gt; 0.3\n\n alpha(#fff, 0.5)\n // =&gt; rgba(255,255,255,0.5)\n</code></pre></div><h2 id=\"darkcolor\">dark(color)</h2><p>Check if <code class=\"highlighter-rouge\">color</code> is dark:</p><div><pre><code>  dark(black)\n // =&gt; true\n\n dark(#005716)\n // =&gt; true\n\n dark(white)\n // =&gt; false\n</code></pre></div><h2 id=\"lightcolor\">light(color)</h2><p>Check if <code class=\"highlighter-rouge\">color</code> is light:</p><div><pre><code>light(black)\n// =&gt; false\n\nlight(white)\n// =&gt; true\n\nlight(#00FF40)\n// =&gt; true\n</code></pre></div><h2 id=\"huecolor-value\">hue(color[, value])</h2><p>Return the hue of the given <code class=\"highlighter-rouge\">color</code>, or set the hue component to the optional second <code class=\"highlighter-rouge\">value</code> argument.</p><div><pre><code>hue(hsl(50deg, 100%, 80%))\n// =&gt; 50deg\n\nhue(#00c, 90deg)\n// =&gt; #6c0\n</code></pre></div><h2 id=\"saturationcolor-value\">saturation(color[, value])</h2><p>Return the saturation of the given <code class=\"highlighter-rouge\">color</code>, or set the saturation component to the optional second <code class=\"highlighter-rouge\">value</code> argument.</p><div><pre><code>saturation(hsl(50deg, 100%, 80%))\n// =&gt; 100%\n\nsaturation(#00c, 50%)\n// =&gt; #339\n</code></pre></div><h2 id=\"lightnesscolor-value\">lightness(color[, value])</h2><p>Return the lightness of the given <code class=\"highlighter-rouge\">color</code>, or set the lightness component to the optional second <code class=\"highlighter-rouge\">value</code> argument.</p><div><pre><code>lightness(hsl(50deg, 100%, 80%))\n// =&gt; 80%\n\nlightness(#00c, 80%)\n// =&gt; #99f\n</code></pre></div><h2 id=\"pushexpr-args\">push(expr, args…)</h2><p>Push the given <code class=\"highlighter-rouge\">args</code> to <code class=\"highlighter-rouge\">expr</code>.</p><div><pre><code> nums = 1 2\npush(nums, 3, 4, 5)\n\nnums\n// =&gt; 1 2 3 4 5\n</code></pre></div><p>Aliased as <code class=\"highlighter-rouge\">append()</code></p><h2 id=\"popexpr\">pop(expr)</h2><p>Pop a value from <code class=\"highlighter-rouge\">expr</code>.</p><div><pre><code> nums = 4 5 3 2 1\nnum = pop(nums)\n\nnums\n// =&gt; 4 5 3 2\nnum\n// =&gt; 1\n</code></pre></div><h2 id=\"shiftexpr\">shift(expr)</h2><p>Shift an element from <code class=\"highlighter-rouge\">expr</code>.</p><div><pre><code> nums = 4 5 3 2 1\nnum = shift(nums)\n\nnums\n// =&gt; 5 3 2 1\nnum\n// =&gt; 4\n</code></pre></div><h2 id=\"unshiftexpr-args\">unshift(expr, args…)</h2><p>Unshift the given <code class=\"highlighter-rouge\">args</code> to <code class=\"highlighter-rouge\">expr</code>.</p><div><pre><code> nums = 4 5\nunshift(nums, 3, 2, 1)\n\nnums\n// =&gt; 1 2 3 4 5\n</code></pre></div><p>Aliased as <code class=\"highlighter-rouge\">prepend()</code></p><h2 id=\"indexlist-value\">index(list, value)</h2><p>Returns the index (zero-based) of a <code class=\"highlighter-rouge\">value</code> within a <code class=\"highlighter-rouge\">list</code>.</p><div><pre><code>list = 1 2 3\n\nindex(list, 2)\n// =&gt; 1\n\nindex(1px solid red, red)\n// =&gt; 2\n</code></pre></div><h2 id=\"keyspairs\">keys(pairs)</h2><p>Return keys in the given <code class=\"highlighter-rouge\">pairs</code>:</p><div><pre><code> pairs = (one 1) (two 2) (three 3)\nkeys(pairs)\n// =&gt; one two three\n</code></pre></div><h2 id=\"valuespairs\">values(pairs)</h2><p>Return values in the given <code class=\"highlighter-rouge\">pairs</code>:</p><div><pre><code> pairs = (one 1) (two 2) (three 3)\nvalues(pairs)\n// =&gt; 1 2 3\n</code></pre></div><h2 id=\"list-separatorlist\">list-separator(list)</h2><p>Return the separator of the given <code class=\"highlighter-rouge\">list</code>.</p><div><pre><code> list1 = a b c\nlist-separator(list1)\n// =&gt; ' '\n\nlist2 = a, b, c\nlist-separator(list2)\n// =&gt; ','\n</code></pre></div><h2 id=\"typeofnode\">typeof(node)</h2><p>Return type of <code class=\"highlighter-rouge\">node</code> as a string.</p><div><pre><code>  type(12)\n // =&gt; 'unit'\n\n typeof(12)\n // =&gt; 'unit'\n\n typeof(#fff)\n // =&gt; 'rgba'\n\n type-of(#fff)\n // =&gt; 'rgba'\n</code></pre></div><p>Aliased as <code class=\"highlighter-rouge\">type-of</code> and <code class=\"highlighter-rouge\">type</code>.</p><h2 id=\"unitunit-type\">unit(unit[, type])</h2><p>Return a string for the type of <code class=\"highlighter-rouge\">unit</code> or an empty string, or assign the given <code class=\"highlighter-rouge\">type</code> without unit conversion.</p><div><pre><code>unit(10)\n// =&gt; ''\n\nunit(15in)\n// =&gt; 'in'\n\nunit(15%, 'px')\n// =&gt; 15px\n\nunit(15%, px)\n// =&gt; 15px\n</code></pre></div><h2 id=\"percentagenum\">percentage(num)</h2><p>Convert a <code class=\"highlighter-rouge\">num</code> to a percentage.</p><div><pre><code>percentage(.5)\n// =&gt; 50%\n\npercentage(4 / 100)\n// =&gt; 4%\n</code></pre></div><h2 id=\"absunit\">abs(unit)</h2><div><pre><code>  abs(-5px)\n // =&gt; 5px\n\n abs(5px)\n // =&gt; 5px\n</code></pre></div><h2 id=\"ceilunit\">ceil(unit)</h2><div><pre><code>  ceil(5.5in)\n // =&gt; 6in\n</code></pre></div><h2 id=\"floorunit\">floor(unit)</h2><div><pre><code>  floor(5.6px)\n // =&gt; 5px\n</code></pre></div><h2 id=\"roundunit\">round(unit)</h2><div><pre><code>  round(5.5px)\n // =&gt; 6px\n\n round(5.4px)\n // =&gt; 5px\n</code></pre></div><p><strong>Note:</strong> All rounding functions can accept optional <code class=\"highlighter-rouge\">precision</code> argument — you can pass the number of digits you want to save after the period:</p><div><pre><code>  ceil(5.52px,1)\n // =&gt; 5.6px\n\n floor(5.57px,1)\n // =&gt; 5.5px\n\n round(5.52px,1)\n // =&gt; 5.5px\n</code></pre></div><h2 id=\"sinangle\">sin(angle)</h2><p>Returns the value of sine for the given <code class=\"highlighter-rouge\">angle</code>. If the angle is given as a degree unit, like <code class=\"highlighter-rouge\">45deg</code>, it is treated as a degree, otherwise it is treated as radians.</p><div><pre><code>sin(30deg)\n// =&gt; 0.5\n\nsin(3*PI/4)\n// =&gt; 0.707106781\n</code></pre></div><h2 id=\"cosangle\">cos(angle)</h2><p>Returns the value of cosine for the given <code class=\"highlighter-rouge\">angle</code>. If the angle is given as a degree unit, like <code class=\"highlighter-rouge\">45deg</code>, it is treated as a degree, otherwise it is treated as radians.</p><div><pre><code>cos(180deg)\n// =&gt; -1\n</code></pre></div><h2 id=\"tanangle\">tan(angle)</h2><p>Returns the value of tangent for the given <code class=\"highlighter-rouge\">angle</code>. If the angle is given as a degree unit, like <code class=\"highlighter-rouge\">45deg</code>, it is treated as a degree, otherwise it is treated as radians.</p><div><pre><code>tan(45deg)\n// =&gt; 1\n\ntan(90deg)\n// =&gt; Infinity\n</code></pre></div><h2 id=\"mina-b\">min(a, b)</h2><div><pre><code>  min(1, 5)\n // =&gt; 1\n</code></pre></div><h2 id=\"maxa-b\">max(a, b)</h2><div><pre><code>  max(1, 5)\n // =&gt; 5\n</code></pre></div><h2 id=\"evenunit\">even(unit)</h2><div><pre><code>  even(6px)\n // =&gt; true\n</code></pre></div><h2 id=\"oddunit\">odd(unit)</h2><div><pre><code>  odd(5mm)\n // =&gt; true\n</code></pre></div><h2 id=\"sumnums\">sum(nums)</h2><div><pre><code>  sum(1 2 3)\n // =&gt; 6\n</code></pre></div><h2 id=\"avgnums\">avg(nums)</h2><div><pre><code> avg(1 2 3)\n// =&gt; 2\n</code></pre></div><h2 id=\"rangestart-stop-step\">range(start, stop[, step])</h2><p>Returns a list of units from <code class=\"highlighter-rouge\">start</code> to <code class=\"highlighter-rouge\">stop</code> (included) by given <code class=\"highlighter-rouge\">step</code>. If <code class=\"highlighter-rouge\">step</code> argument is omitted, it defaults to 1. The <code class=\"highlighter-rouge\">step</code> must not be zero.</p><div><pre><code>range(1, 6)\n// equals to `1..6`\n// 1 2 3 4 5 6\n\nrange(1, 6, 2)\n// 1 3 5\n\nrange(-6, -1, 2)\n// -6 -4 -2\n\nrange(1px, 3px, 0.5px)\n// 1px 1.5px 2px 2.5px 3px\n</code></pre></div><p>It is most often used in <code class=\"highlighter-rouge\">for</code> loops:</p><div><pre><code>for i in range(10px, 50px, 10)\n .col-{i}\n   width: i\n</code></pre></div><p>Yields:</p><div><pre><code>.col-10 {\n width: 10px;\n}\n.col-20 {\n width: 20px;\n}\n.col-30 {\n width: 30px;\n}\n.col-40 {\n width: 40px;\n}\n.col-50 {\n width: 50px;\n}\n</code></pre></div><h2 id=\"base-convertnum-base-width\">base-convert(num, base, width)</h2><p>Returns a <code class=\"highlighter-rouge\">Literal</code> <code class=\"highlighter-rouge\">num</code> converted to the provided <code class=\"highlighter-rouge\">base</code>, padded to <code class=\"highlighter-rouge\">width</code> with zeroes (default width is 2)</p><div><pre><code>base-convert(1, 10, 3)\n// =&gt; 001\n\nbase-convert(14, 16, 1)\n// =&gt; e\n\nbase-convert(42, 2)\n// =&gt; 101010\n</code></pre></div><h2 id=\"matchpattern-string-flags\">match(pattern, string[, flags])</h2><p>Retrieves the matches when matching a <code class=\"highlighter-rouge\">val</code>(string) against a <code class=\"highlighter-rouge\">pattern</code>(regular expression).</p><div><pre><code>match('^(height|width)?([&lt;&gt;=]{1,})(.*)', 'height&gt;=1024px')\n// =&gt; 'height&gt;=1024px' 'height' '&gt;=' '1024px'\n\nmatch('^foo(?:bar)?', 'foo')\n// =&gt; 'foo'\n\nmatch('^foo(?:bar)?', 'foobar')\n// =&gt; 'foobar'\n\nmatch('^foo(?:bar)?', 'bar')\n// =&gt; null\n\nmatch('ain', 'The rain in SPAIN stays mainly in the plain')\n// =&gt; 'ain'\n\nmatch('ain', 'The rain in SPAIN stays mainly in the plain', g)\n// =&gt; 'ain' 'ain' 'ain'\n\nmatch('ain', 'The rain in SPAIN stays mainly in the plain', 'gi')\n// =&gt; 'ain' 'AIN' 'ain' 'ain'\n</code></pre></div><h2 id=\"replacepattern-replacement-val\">replace(pattern, replacement, val)</h2><p>Returns string with all matches of <code class=\"highlighter-rouge\">pattern</code> replaced by <code class=\"highlighter-rouge\">replacement</code> in given <code class=\"highlighter-rouge\">val</code></p><div><pre><code>replace(i, e, 'griin')\n// =&gt; 'green'\n\nreplace(i, e, griin)\n// =&gt; #008000\n</code></pre></div><h2 id=\"joindelim-vals\">join(delim, vals…)</h2><p>Join the given <code class=\"highlighter-rouge\">vals</code> with <code class=\"highlighter-rouge\">delim</code>.</p><div><pre><code>  join(' ', 1 2 3)\n // =&gt; \"1 2 3\"\n\n join(',', 1 2 3)\n // =&gt; \"1,2,3\"\n\n join(', ', foo bar baz)\n // =&gt; \"foo, bar, baz\"\n\n join(', ', foo, bar, baz)\n // =&gt; \"foo, bar, baz\"\n\n join(', ', 1 2, 3 4, 5 6)\n // =&gt; \"1 2, 3 4, 5 6\"\n</code></pre></div><h2 id=\"splitdelim-val\">split(delim, val)</h2><p>The <code class=\"highlighter-rouge\">split()</code>` method splits a string/ident into an array of strings by separating the string into substrings.</p><div><pre><code>split(_, bar1_bar2_bar3)\n// =&gt; bar1 bar2 bar3\n\nsplit(_, 'bar1_bar2_bar3')\n// =&gt; 'bar1' 'bar2' 'bar3'\n</code></pre></div><h2 id=\"substrval-start-length\">substr(val, start, length)</h2><p>The <code class=\"highlighter-rouge\">substr()</code> method returns the characters in a string beginning at the specified location through the specified number of characters.</p><div><pre><code>substr(ident, 1, 2)\n// =&gt; de\n\nsubstr('string', 1, 2)\n// =&gt; 'tr'\n\nval = dredd\nsubstr(substr(val, 1), 0, 3)\n// =&gt; #f00\n</code></pre></div><h2 id=\"sliceval-start-end\">slice(val, start[, end])</h2><p>The <code class=\"highlighter-rouge\">slice()</code> method extracts a section of a string/list and returns a new string/list.</p><p>slice(‘lorem’ ‘ipsum’ ‘dolor’, 1, 2) slice(‘lorem’ ‘ipsum’ ‘dolor’, 1, -1) // =&gt; ‘ipsum’</p><p>slice(‘lorem ipsum’, 1, 5) // =&gt; ‘orem’ slice(rredd, 1, -1) // =&gt; #f00</p><p>slice(1px solid black, 1) // =&gt; solid #000</p><h2 id=\"hslacolor--hsla\">hsla(color | h,s,l,a)</h2><p>Convert the given <code class=\"highlighter-rouge\">color</code> to an <code class=\"highlighter-rouge\">HSLA</code> node, or h,s,l,a component values.</p><div><pre><code> hsla(10deg, 50%, 30%, 0.5)\n// =&gt; HSLA\n\nhsla(#ffcc00)\n// =&gt; HSLA\n</code></pre></div><h2 id=\"hslcolor--hsl\">hsl(color | h,s,l)</h2><p>Convert the given <code class=\"highlighter-rouge\">color</code> to an <code class=\"highlighter-rouge\">HSLA</code> node, or h,s,l,a component values.</p><div><pre><code> hsl(10, 50, 30)\n// =&gt; HSLA\n\nhsl(#ffcc00)\n// =&gt; HSLA\n</code></pre></div><h2 id=\"rgbacolor--rgba\">rgba(color | r,g,b,a)</h2><p>Return <code class=\"highlighter-rouge\">RGBA</code> from the r,g,b,a channels or provide a <code class=\"highlighter-rouge\">color</code> to tweak the alpha.</p><div><pre><code>  rgba(255,0,0,0.5)\n // =&gt; rgba(255,0,0,0.5)\n\n rgba(255,0,0,1)\n // =&gt; #ff0000\n\n rgba(#ffcc00, 0.5)\n // rgba(255,204,0,0.5)\n</code></pre></div><p>Alternatively stylus supports the <code class=\"highlighter-rouge\">#rgba</code> and <code class=\"highlighter-rouge\">#rrggbbaa</code> notations as well:</p><div><pre><code>#fc08\n// =&gt; rgba(255,204,0,0.5)\n\n#ffcc00ee\n// =&gt; rgba(255,204,0,0.9)\n</code></pre></div><h2 id=\"rgbcolor--rgb\">rgb(color | r,g,b)</h2><p>Return a <code class=\"highlighter-rouge\">RGBA</code> from the r,g,b channels or cast to an <code class=\"highlighter-rouge\">RGBA</code> node.</p><div><pre><code>rgb(255,204,0)\n// =&gt; #ffcc00\n\nrgb(#fff)\n// =&gt; #fff\n</code></pre></div><h2 id=\"blendtop-bottom\">blend(top[, bottom])</h2><p>Blends the given <code class=\"highlighter-rouge\">top</code> color over the <code class=\"highlighter-rouge\">bottom</code> one using the normal blending. The <code class=\"highlighter-rouge\">bottom</code> argument is optional and is defaulted to <code class=\"highlighter-rouge\">#fff</code>.</p><div><pre><code>blend(rgba(#FFF, 0.5), #000)\n// =&gt; #808080\n\nblend(rgba(#FFDE00,.42), #19C261)\n// =&gt; #7ace38\n\nblend(rgba(lime, 0.5), rgba(red, 0.25))\n// =&gt; rgba(128,128,0,0.625)\n</code></pre></div><h2 id=\"lightencolor-amount\">lighten(color, amount)</h2><p>Lighten the given <code class=\"highlighter-rouge\">color</code> by <code class=\"highlighter-rouge\">amount</code>. This function is unit-sensitive, for example supporting percentages as shown below.</p><div><pre><code>lighten(#2c2c2c, 30)\n// =&gt; #787878\n\nlighten(#2c2c2c, 30%)\n// =&gt; #393939\n</code></pre></div><h2 id=\"darkencolor-amount\">darken(color, amount)</h2><p>Darken the given <code class=\"highlighter-rouge\">color</code> by <code class=\"highlighter-rouge\">amount</code>.This function is unit-sensitive, for example supporting percentages as shown below.</p><div><pre><code>darken(#D62828, 30)\n// =&gt; #551010\n\ndarken(#D62828, 30%)\n// =&gt; #961c1c\n</code></pre></div><h2 id=\"desaturatecolor-amount\">desaturate(color, amount)</h2><p>Desaturate the given <code class=\"highlighter-rouge\">color</code> by <code class=\"highlighter-rouge\">amount</code>.</p><div><pre><code>desaturate(#f00, 40%)\n// =&gt; #c33\n</code></pre></div><h2 id=\"saturatecolor-amount\">saturate(color, amount)</h2><p>Saturate the given <code class=\"highlighter-rouge\">color</code> by <code class=\"highlighter-rouge\">amount</code>.</p><div><pre><code>saturate(#c33, 40%)\n// =&gt; #f00\n</code></pre></div><h2 id=\"complementcolor\">complement(color)</h2><p>Gives the complementary color. Equals to spinning hue to 180deg.</p><div><pre><code>complement(#fd0cc7)\n// =&gt; #0cfd42\n</code></pre></div><h2 id=\"invertcolor\">invert(color)</h2><p>Inverts the color. The red, green, and blue values are inverted, while the opacity is left alone.</p><div><pre><code>invert(#d62828)\n// =&gt; #29d7d7\n</code></pre></div><h2 id=\"spincolor-amount\">spin(color, amount)</h2><p>Spins hue of the given <code class=\"highlighter-rouge\">color</code> by <code class=\"highlighter-rouge\">amount</code>.</p><div><pre><code> spin(#ff0000, 90deg)\n// =&gt; #80ff00\n</code></pre></div><h2 id=\"grayscalecolor\">grayscale(color)</h2><p>Gives the grayscale equivalent of the given color. Equals to desaturate by 100%.</p><div><pre><code>grayscale(#fd0cc7)\n// =&gt; #0cfd42\n</code></pre></div><h2 id=\"mixcolor1-color2-amount\">mix(color1, color2[, amount])</h2><p>Mix two colors by a given amount. The <code class=\"highlighter-rouge\">amount</code> is optional and is defaulted to <code class=\"highlighter-rouge\">50%</code>.</p><div><pre><code>mix(#000, #fff, 30%)\n// =&gt; #b2b2b2\n</code></pre></div><h2 id=\"tintcolor-amount\">tint(color, amount)</h2><p>Mix the given color with white.</p><div><pre><code>tint(#fd0cc7,66%)\n// =&gt; #feaceb\n</code></pre></div><h2 id=\"shadecolor-amount\">shade(color, amount)</h2><p>Mix the given color with black.</p><div><pre><code>shade(#fd0cc7,66%)\n// =&gt; #560443\n</code></pre></div><h2 id=\"luminositycolor\">luminosity(color)</h2><p>Returns the relative luminance of the given <code class=\"highlighter-rouge\">color</code>.</p><div><pre><code>luminosity(white)\n// =&gt; 1\n\nluminosity(#000)\n// =&gt; 0\n\nluminosity(red)\n// =&gt; 0.2126\n</code></pre></div><h2 id=\"contrasttop-bottom\">contrast(top[, bottom])</h2><p>Returns the contrast ratio object between <code class=\"highlighter-rouge\">top</code> and <code class=\"highlighter-rouge\">bottom</code> colors, based on script underlying “<span style=\"text-decoration:underline\">contrast ratio</span>” tool by Lea Verou.</p><p>The second argument is optional and is defaulted to <code class=\"highlighter-rouge\">#fff</code>.</p><p>The main key in the returned object is <code class=\"highlighter-rouge\">ratio</code>, it also have <code class=\"highlighter-rouge\">min</code> and <code class=\"highlighter-rouge\">max</code> values that are different from the <code class=\"highlighter-rouge\">ratio</code> only when the <code class=\"highlighter-rouge\">bottom</code> color is transparent. In that case the <code class=\"highlighter-rouge\">error</code> also contains an error margin.</p><div><pre><code>contrast(#000, #fff).ratio\n=&gt; 21\ncontrast(#000, rgba(#FFF, 0.5))\n=&gt; { \"ratio\": \"13.15;\", \"error\": \"-7.85\", \"min\": \"5.3\", \"max\": \"21\" }\n</code></pre></div><h2 id=\"transparentifytop-bottom-alpha\">transparentify(top[, bottom, alpha])</h2><p>Returns the transparent version of the given <code class=\"highlighter-rouge\">top</code> color, as if it was blend over the given <code class=\"highlighter-rouge\">bottom</code> color (or the closest to it, if it is possible).</p><p>The second argument is optional and is defaulted to <code class=\"highlighter-rouge\">#fff</code>.</p><p>The third argument is optional and overrides the autodetected alpha.</p><div><pre><code>transparentify(#808080)\n=&gt; rgba(0,0,0,0.5)\n\ntransparentify(#414141, #000)\n=&gt; rgba(255,255,255,0.25)\n\ntransparentify(#91974C, #F34949, 0.5)\n=&gt; rgba(47,229,79,0.5)\n</code></pre></div><h2 id=\"unquotestr--ident\">unquote(str | ident)</h2><p>Unquote the given <code class=\"highlighter-rouge\">str</code> and returned as a <code class=\"highlighter-rouge\">Literal</code> node.</p><div><pre><code>   unquote(\"sans-serif\")\n  // =&gt; sans-serif\n\n  unquote(sans-serif)\n  // =&gt; sans-serif\n\n  unquote('1px / 2px')\n  // =&gt; 1px / 2px\n</code></pre></div><h2 id=\"convertstr\">convert(str)</h2><p>Like <code class=\"highlighter-rouge\">unquote()</code> but tries to convert the given <code class=\"highlighter-rouge\">str</code> to a Stylus node.</p><div><pre><code>   unit = convert('40px')\n  typeof(unit)\n  // =&gt; 'unit'\n\n  color = convert('#fff')\n  typeof(color)\n  // =&gt; 'rgba'\n\n  foo = convert('foo')\n  typeof(foo)\n  // =&gt; 'ident'\n</code></pre></div><h2 id=\"sfmt-\">s(fmt, …)</h2><p>The <code class=\"highlighter-rouge\">s()</code> function is similar to <code class=\"highlighter-rouge\">unquote()</code>, in that it returns a <code class=\"highlighter-rouge\">Literal</code> node, however it accepts a format string much like C’s <code class=\"highlighter-rouge\">sprintf()</code>. Currently the only specifier is <code class=\"highlighter-rouge\">%s</code>.</p><div><pre><code>    s('bar()');\n   // =&gt; bar()\n\n   s('bar(%s)', 'baz');\n   // =&gt; bar(\"baz\")\n\n   s('bar(%s)', baz);\n   // =&gt; bar(baz)\n\n   s('bar(%s)', 15px);\n   // =&gt; bar(15px)\n\n   s('rgba(%s, %s, %s, 0.5)', 255, 100, 50);\n   // =&gt; rgba(255, 100, 50, 0.5)\n\n   s('bar(%Z)', 15px);\n   // =&gt; bar(%Z)\n\n   s('bar(%s, %s)', 15px);\n   // =&gt; bar(15px, null)\n</code></pre></div><p>Check out the <code class=\"highlighter-rouge\">%</code> string operator for equivalent behaviour.</p><h2 id=\"basenamepath-ext\">basename(path[, ext])</h2><p>Returns the basename of <code class=\"highlighter-rouge\">path</code>, (optionally) with <code class=\"highlighter-rouge\">ext</code> extension removed.</p><div><pre><code>basename('images/foo.png')\n// =&gt; \"foo.png\"\n\nbasename('images/foo.png', '.png')\n// =&gt; \"foo\"\n</code></pre></div><h2 id=\"dirnamepath\">dirname(path)</h2><p>Returns the dirname of <code class=\"highlighter-rouge\">path</code>.</p><div><pre><code>dirname('images/foo.png')\n// =&gt; \"images\"\n</code></pre></div><h2 id=\"extnamepath\">extname(path)</h2><p>Returns the filename extension of <code class=\"highlighter-rouge\">path</code> including the dot.</p><div><pre><code>extname('images/foo.png')\n// =&gt; \".png\"\n</code></pre></div><h2 id=\"pathjoin\">pathjoin(…)</h2><p>Peform a path join.</p><div><pre><code>pathjoin('images', 'foo.png')\n// =&gt; \"images/foo.png\"\n\npath = 'images/foo.png'\next = extname(path)\npathjoin(dirname(path), basename(path, ext) + _thumb + ext)\n// =&gt; 'images/foo_thumb.png'\n</code></pre></div><h2 id=\"called-from-property\"><code class=\"highlighter-rouge\">called-from</code> property</h2><p><code class=\"highlighter-rouge\">called-from</code> property contains the list of the functions the current function was called from in the reverse order (the first item is the deepest function).</p><div><pre><code>foo()\n bar()\n\nbar()\n baz()\n\nbaz()\n return called-from\n\nfoo()\n// =&gt; bar foo\n</code></pre></div><h2 id=\"current-media\">current-media()</h2><p><code class=\"highlighter-rouge\">current-media()</code> function returns the string of the current block’s <code class=\"highlighter-rouge\">@media</code> rule or <code class=\"highlighter-rouge\">''</code> if there is no <code class=\"highlighter-rouge\">@media</code> above the block.</p><div><pre><code>@media only screen and (min-width: 1024px)\n current-media()\n// =&gt; '@media (only screen and (min-width: (1024px)))'\n</code></pre></div><h2 id=\"cachekeys\">+cache(keys…)</h2><p><code class=\"highlighter-rouge\">+cache</code> is a really powerful built-in function that allows you to create your own “cachable” mixins.</p><p>“Cachable mixin” is the one, that would apply its contents to the given selector on the first call, but would <code class=\"highlighter-rouge\">@extend</code> the first call’s selector at the second call with the same params.</p><div><pre><code>size($width, $height = $width)\n +cache('w' + $width)\n   width: $width\n +cache('h' + $height)\n   height: $height\n\n.a\n size: 10px 20px\n.b\n size: 10px 2em\n.c\n size: 1px 2em\n</code></pre></div><p>Would yield to</p><div><pre><code>.a,\n.b {\n width: 10px;\n}\n.a {\n height: 20px;\n}\n.b,\n.c {\n height: 2em;\n}\n.c {\n width: 1px;\n}\n</code></pre></div><p>See how the selectors are grouped together by the used property.</p><h2 id=\"prefix-classesprefix\">+prefix-classes(prefix)</h2><p>Stylus comes with a block mixin <code class=\"highlighter-rouge\">prefix-classes</code> that can be used for prefixing the classes inside any given Stylus’ block. For example:</p><div><pre><code>+prefix-classes('foo-')\n .bar\n   width: 10px\n</code></pre></div><p>Yields:</p><div><pre><code>.foo-bar {\n width: 10px;\n}\n</code></pre></div><h2 id=\"lookupname\">lookup(name)</h2><p>Allows to lookup a variable with a given name, passed as a string. Returns <code class=\"highlighter-rouge\">null</code> if the variable is undefined.</p><p>Useful when you need to get a value of a variable with dynamically generated name:</p><div><pre><code>font-size-1 = 10px\nfont-size-2 = 20px\nfont-size-3 = 30px\n\nfor i in 1..3\n .text-{i}\n   font-size: lookup('font-size-' + i)\n</code></pre></div><p>Yields:</p><div><pre><code>.text-1 {\n font-size: 10px;\n}\n.text-2 {\n font-size: 20px;\n}\n.text-3 {\n font-size: 30px;\n}\n</code></pre></div><h2 id=\"definename-expr-global\">define(name, expr[, global])</h2><p>Allows to create or overwrite a variable with a given name, passed as a string, onto current scope (or global scope if <code class=\"highlighter-rouge\">global</code> is true).</p><p>This bif can be useful on those cases in which you’d wish interpolation in variable names:</p><div><pre><code>prefix = 'border'\nborder = { color: #000, length: 1px, style: solid }\n\nfor prop, val in border\n define(prefix + '-' + prop, val)\n\nbody\n border: border-length border-style border-color\n</code></pre></div><p>yields:</p><div><pre><code>body {\n border: 1px solid #000;\n}\n</code></pre></div><h2 id=\"operateop-left-right\">operate(op, left, right)</h2><p>Perform the given <code class=\"highlighter-rouge\">op</code> on the <code class=\"highlighter-rouge\">left</code> and <code class=\"highlighter-rouge\">right</code> operands:</p><div><pre><code>  op = '+'\n operate(op, 15, 5)\n // =&gt; 20\n</code></pre></div><h2 id=\"lengthexpr\">length([expr])</h2><p>Parenthesized expressions may act as tuples, the <code class=\"highlighter-rouge\">length()</code> function returns the length of such expressions.</p><div><pre><code>length((1 2 3 4))\n// =&gt; 4\n\nlength((1 2))\n// =&gt; 2\n\nlength((1))\n// =&gt; 1\n\nlength(())\n// =&gt; 0\n\nlength(1 2 3)\n// =&gt; 3\n\nlength(1)\n// =&gt; 1\n\nlength()\n// =&gt; 0\n</code></pre></div><h2 id=\"selector\">selector()</h2><p>Returns the compiled current selector or <code class=\"highlighter-rouge\">&amp;</code> if called at root level.</p><div><pre><code>.foo\n selector()\n// =&gt; '.foo'\n\n.foo\n &amp;:hover\n   selector()\n// '.foo:hover'\n</code></pre></div><h2 id=\"selector-existsselector\">selector-exists(selector)</h2><p>Returns true if the given selector exists.</p><div><pre><code>.foo\n color red\n\n a\n   font-size 12px\n\nselector-exists('.foo') // true\nselector-exists('.foo a') // true\nselector-exists('.foo li') // false\nselector-exists('.bar') // false\n</code></pre></div><p>This method does not take into account the current context meaning:</p><div><pre><code>.foo\n color red\n\n a\n   font-size 12px\n\n selector-exists('a') // false\n selector-exists(selector() + ' a') // true\n</code></pre></div><h2 id=\"warnmsg\">warn(msg)</h2><p>Warn with the given error <code class=\"highlighter-rouge\">msg</code>, does not exit.</p><div><pre><code>  warn(\"oh noes!\")\n</code></pre></div><h2 id=\"errormsg\">error(msg)</h2><p>Exits with the given error <code class=\"highlighter-rouge\">msg</code>.</p><div><pre><code>add(a, b)\n unless a is a 'unit' and b is a 'unit'\n   error('add() expects units')\n a + b\n</code></pre></div><h2 id=\"lastexpr\">last(expr)</h2><p>Return the <em>last</em> value in the given <code class=\"highlighter-rouge\">expr</code>:</p><div><pre><code>  nums = 1 2 3\n last(nums)\n last(1 2 3)\n // =&gt; 3\n\n list = (one 1) (two 2) (three 3)\n last(list)\n // =&gt; (three 3)\n</code></pre></div><h2 id=\"pexpr\">p(expr)</h2><p>Inspect the given <code class=\"highlighter-rouge\">expr</code>:</p><div><pre><code> fonts = Arial, sans-serif\np('test')\np(123)\np((1 2 3))\np(fonts)\np(#fff)\np(rgba(0,0,0,0.2))\n\nadd(a, b)\n  a + b\n\np(add)\n</code></pre></div><p>stdout:</p><div><pre><code> inspect: \"test\"\ninspect: 123\ninspect: 1 2 3\ninspect: Arial, sans-serif\ninspect: #fff\ninspect: rgba(0,0,0,0.2)\ninspect: add(a, b)\n</code></pre></div><h2 id=\"opposite-positionpositions\">opposite-position(positions)</h2><p>Return the opposites of the given <code class=\"highlighter-rouge\">positions</code>.</p><div><pre><code> opposite-position(right)\n// =&gt; left\n\nopposite-position(top left)\n// =&gt; bottom right\n\nopposite-position('top' 'left')\n// =&gt; bottom right\n</code></pre></div><h2 id=\"image-sizepath\">image-size(path)</h2><p>Returns the <code class=\"highlighter-rouge\">width</code> and <code class=\"highlighter-rouge\">height</code> of the image found at <code class=\"highlighter-rouge\">path</code>. Lookups are performed in the same manner as <code class=\"highlighter-rouge\">@import</code>, altered by the <code class=\"highlighter-rouge\">paths</code> setting.</p><div><pre><code>  width(img)\n   return image-size(img)[0]\n\n height(img)\n   return image-size(img)[1]\n\n image-size('tux.png')\n // =&gt; 405px 250px\n\n image-size('tux.png')[0] == width('tux.png')\n // =&gt; true\n</code></pre></div><h2 id=\"embedurlpath-encoding\">embedurl(path[, encoding])</h2><p>Returns an inline image as a <code class=\"highlighter-rouge\">url()</code> literal, encoded with <code class=\"highlighter-rouge\">encoding</code> (available encodings: <code class=\"highlighter-rouge\">base64</code> (default), and <code class=\"highlighter-rouge\">utf8</code>).</p><div><pre><code>background: embedurl('logo.png')\n// =&gt; background: url(\"data:image/png;base64,…\")\n\nbackground: embedurl('logo.svg', 'utf8')\n// =&gt; background: url(\"data:image/svg+xml;charset=utf-8,…\")\n</code></pre></div><h2 id=\"add-propertyname-expr\">add-property(name, expr)</h2><p>Adds property <code class=\"highlighter-rouge\">name</code>, with the given <code class=\"highlighter-rouge\">expr</code> to the closest block.</p><p>For example:</p><div><pre><code>  something()\n   add-property('bar', 1 2 3)\n   s('bar')\n\n body\n   foo: something()\n</code></pre></div><p>yields:</p><div><pre><code>  body {\n   bar: 1 2 3;\n   foo: bar;\n }\n</code></pre></div><p>Next the “magic” <code class=\"highlighter-rouge\">current-property</code> local variable comes into play. This variable is automatically available to function bodies, and contains an expression with the current property’s name, and value.</p><p>For example if we were to inspect this local variable using <code class=\"highlighter-rouge\">p()</code>, we get the following:</p><div><pre><code>    p(current-property)\n   // =&gt; \"foo\" (foo __CALL__ bar baz)\n\n   p(current-property[0])\n   // =&gt; \"foo\"\n\n   p(current-property[1])\n   // =&gt; foo __CALL__ bar baz\n</code></pre></div><p>Using <code class=\"highlighter-rouge\">current-property</code> we can take our example a bit further, and duplicate the property with new values, and a conditional to ensure the function is only used within a property value.</p><div><pre><code>    something(n)\n     if current-property\n       add-property(current-property[0], s('-webkit-something(%s)', n))\n       add-property(current-property[0], s('-moz-something(%s)', n))\n       s('something(%s)', n)\n     else\n       error('something() must be used within a property')\n\n   body {\n     foo: something(15px) bar;\n   }\n</code></pre></div><p>yields:</p><div><pre><code>    body {\n     foo: -webkit-something(15px);\n     foo: -moz-something(15px);\n     foo: something(15px) bar;\n   }\n</code></pre></div><p>If you noticed in the example above, <code class=\"highlighter-rouge\">bar</code> is only present for the initial call, since we returned <code class=\"highlighter-rouge\">something(15px)</code>, it remained in-place within the expression, however the others do not take the rest of the expression into account.</p><p>Our more robust solution below, defines a function named <code class=\"highlighter-rouge\">replace()</code> which clones the expression to prevent mutation, replaces the string value of an expression with another, and returns the cloned expression. We then move on to replace <code class=\"highlighter-rouge\">__CALL__</code> within the expressions, which represents the cyclic call to <code class=\"highlighter-rouge\">something()</code>.</p><div><pre><code>    replace(expr, str, val)\n     expr = clone(expr)\n     for e, i in expr\n       if str == e\n         expr[i] = val\n     expr\n\n   something(n)\n     if current-property\n       val = current-property[1]\n       webkit = replace(val, '__CALL__', s('-webkit-something(%s)', n))\n       moz = replace(val, '__CALL__', s('-moz-something(%s)', n))\n       add-property(current-property[0], webkit)\n       add-property(current-property[0], moz)\n       s('something(%s)', n)\n     else\n       error('something() must be used within a property')\n\n   body\n     foo: something(5px) bar baz\n</code></pre></div><p>yields:</p><div><pre><code>      body {\n       foo: -webkit-something(5px) bar baz;\n       foo: -moz-something(5px) bar baz;\n       foo: something(5px) bar baz;\n     }\n</code></pre></div><p>Our implementation is now fully transparent both in regards to the property it is called within, and the position of the call. This powerful concept aids in transparent vendor support for function calls, such as gradients.</p><h2 id=\"jsonpath-options\">json(path[, options])</h2><p>Convert a .json file into stylus variables or an object. Nested variable object keys are joined with a dash (-).</p><p>For example, the following sample media-queries.json file:</p><div><pre><code>{\n   \"small\": \"screen and (max-width:400px)\",\n   \"tablet\": {\n       \"landscape\": \"screen and (min-width:600px) and (orientation:landscape)\",\n       \"portrait\": \"screen and (min-width:600px) and (orientation:portrait)\"\n   }\n}\n</code></pre></div><p>May be used in the following ways:</p><div><pre><code>json('media-queries.json')\n\n@media small\n// =&gt; @media screen and (max-width:400px)\n\n@media tablet-landscape\n// =&gt; @media screen and (min-width:600px) and (orientation:landscape)\n\nvars = json('vars.json', { hash: true })\nbody\n width: vars.width\n\nvars = json('vars.json', { hash: true, leave-strings: true })\ntypeof(vars.icon)\n// =&gt; 'string'\n\n// don't throw an error if the JSON file doesn't exist\noptional = json('optional.json', { hash: true, optional: true })\ntypeof(optional)\n// =&gt; 'null'\n</code></pre></div><h2 id=\"usepath\">use(path)</h2><p>You can use any given js-plugin at given <code class=\"highlighter-rouge\">path</code> with <code class=\"highlighter-rouge\">use()</code> function right inside your ‘.styl’ files, like this:</p><div><pre><code>use(\"plugins/add.js\")\n\nwidth add(10, 100)\n// =&gt; width: 110\n</code></pre></div><p>And the <code class=\"highlighter-rouge\">add.js</code> plugin in this case looks this way:</p><div><pre><code>var plugin = function(){\n return function(style){\n   style.define('add', function(a, b) {\n     return a.operate('+', b);\n   });\n };\n};\nmodule.exports = plugin;\n</code></pre></div><p>If you’d like to return any Stylus objects like <code class=\"highlighter-rouge\">RGBA</code>, <code class=\"highlighter-rouge\">Ident</code> or <code class=\"highlighter-rouge\">Unit</code>, you could use the provided Stylus nodes like this:</p><div><pre><code>var plugin = function(){\n return function(style){\n   var nodes = this.nodes;\n   style.define('something', function() {\n     return new nodes.Ident('foobar');\n   });\n };\n};\nmodule.exports = plugin;\n</code></pre></div><p>You can pass any options as an optional second argument, using the hash object:</p><div><pre><code>use(\"plugins/add.js\", { foo: bar })\n</code></pre></div><h2 id=\"undefined-functions\">Undefined Functions</h2><p>Undefined functions will output as literals, so for example we may call <code class=\"highlighter-rouge\">rgba-stop(50%, #fff)</code> within our css, and it will output as you would expect. We can use this within helpers as well.</p><p>In the example below we simply define the function <code class=\"highlighter-rouge\">stop()</code> which returns the literal <code class=\"highlighter-rouge\">rgba-stop()</code> call.</p><div><pre><code>stop(pos, rgba)\n rgba-stop(pos, rgba)\n\nstop(50%, orange)\n// =&gt; rgba-stop(50%, #ffa500)\n</code></pre></div></div>\n"}