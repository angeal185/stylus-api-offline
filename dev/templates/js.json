{"js":"<div class=\"docs\"><h1>JavaScript API</h1><p>Simply <code class=\"highlighter-rouge\">require</code> the module, and call <code class=\"highlighter-rouge\">render()</code> with the given string of Stylus code, and (optional) <code class=\"highlighter-rouge\">options</code> object.</p><p>Frameworks utilizing Stylus should pass the <code class=\"highlighter-rouge\">filename</code> option to provide better error reporting.</p><div><pre><code>var stylus = require('stylus');\r\n\r\nstylus.render(str, { filename: 'nesting.css' }, function(err, css){\r\n  if (err) throw err;\r\n  console.log(css);\r\n});\r\n</code></pre></div><p>We can also do the same thing in a more progressive manner:</p><div><pre><code>var stylus = require('stylus');\r\n\r\nstylus(str)\r\n  .set('filename', 'nesting.css')\r\n  .render(function(err, css){\r\n    // logic\r\n  });\r\n</code></pre></div><h2 id=\"setsetting-value\">.set(setting, value)</h2><p>Apply a setting such as a <code class=\"highlighter-rouge\">filename</code>, or import <code class=\"highlighter-rouge\">paths</code>:</p><div><pre><code> .set('filename', __dirname + '/test.styl')\r\n .set('paths', [__dirname, __dirname + '/mixins'])\r\n</code></pre></div><h2 id=\"includepath\">.include(path)</h2><p>A progressive alternative to <code class=\"highlighter-rouge\">.set('paths',...)</code> is <code class=\"highlighter-rouge\">.include()</code>. This is ideal when exposing external Stylus libraries which expose a path.</p><div><pre><code>stylus(str)\r\n  .include(require('nib').path)\r\n  .include(process.env.HOME + '/mixins')\r\n  .render(...)\r\n</code></pre></div><h2 id=\"importpath\">.import(path)</h2><p>Defer importing of the given <code class=\"highlighter-rouge\">path</code> until evaluation is performed. The example below is essentially the same as doing <code class=\"highlighter-rouge\">@import 'mixins/vendor'</code> within your Stylus sheet.</p><div><pre><code>  var stylus = require('../')\r\n    , str = require('fs').readFileSync(__dirname + '/test.styl', 'utf8');\r\n\r\n  stylus(str)\r\n    .set('filename', __dirname + '/test.styl')\r\n    .import('mixins/vendor')\r\n    .render(function(err, css){\r\n    if (err) throw err;\r\n    console.log(css);\r\n  });\r\n</code></pre></div><h2 id=\"definename-node\">.define(name, node)</h2><p>By passing a <code class=\"highlighter-rouge\">Node</code>, we may define a global variable. This is useful when exposing conditional features within your library depending on the availability of another. For example the <strong>Nib</strong> extension library conditionally supports node-canvas, providing image generation.</p><p>However, this is not always available, so Nib may define:</p><div><pre><code> .define('has-canvas', stylus.nodes.false);\r\n .define('some-setting', new stylus.nodes.String('some value'));\r\n</code></pre></div><p>Stylus also casts JavaScript values to their Stylus equivalents when possible. Here are a few examples:</p><div><pre><code> .define('string', 'some string')\r\n .define('number', 15.5)\r\n .define('some-bool', true)\r\n .define('list', [1,2,3])\r\n .define('list', [1,2,[3,4,[5,6]]])\r\n .define('list', { foo: 'bar', bar: 'baz' })\r\n .define('families', ['Helvetica Neue', 'Helvetica', 'sans-serif'])\r\n</code></pre></div><p>These same rules apply to return values in js functions as well:</p><div><pre><code> .define('get-list', function(){\r\n   return ['foo', 'bar', 'baz'];\r\n })\r\n</code></pre></div><h2 id=\"definename-fn\">.define(name, fn)</h2><p>This method allows you to provide a JavaScript-defined function to Stylus. Think of these as you would JavaScript-to-C++ bindings. When there’s something you cannot do in Stylus, define it in JavaScript!</p><p>In this example, we define four functions: <code class=\"highlighter-rouge\">add()</code>, <code class=\"highlighter-rouge\">sub()</code>, <code class=\"highlighter-rouge\">image-width()</code>, and <code class=\"highlighter-rouge\">image-height()</code>. These functions must return a <code class=\"highlighter-rouge\">Node</code>, this constructor and the other nodes are available via <code class=\"highlighter-rouge\">stylus.nodes</code>.</p><div><pre><code>  var stylus = require('../')\r\n    , nodes = stylus.nodes\r\n    , utils = stylus.utils\r\n    , fs = require('fs');\r\n\r\n  function add(a, b) {\r\n    return a.operate('+', b);\r\n  }\r\n\r\n  function sub(a, b) {\r\n    return a.operate('-', b);\r\n  }\r\n\r\n  function imageDimensions(img) {\r\n    // assert that the node (img) is a String node, passing\r\n    // the param name for error reporting\r\n    utils.assertType(img, 'string', 'img');\r\n    var path = img.val;\r\n\r\n    // Grab bytes necessary to retrieve dimensions.\r\n    // if this was real you would do this per format,\r\n    // instead of reading the entire image :)\r\n    var data = fs.readFileSync(__dirname + '/' + path);\r\n\r\n    // GIF\r\n    // of course you would support.. more :)\r\n    if ('GIF' == data.slice(0, 3).toString()) {\r\n      var w = data.slice(6, 8)\r\n        , h = data.slice(8, 10);\r\n      w = w[1] &lt;&lt; 8 | w[0];\r\n      h = h[1] &lt;&lt; 8 | h[0];\r\n    }\r\n\r\n    return [w, h];\r\n  }\r\n\r\n  function imageWidth(img) {\r\n    return new nodes.Unit(imageDimensions(img)[0]);\r\n  }\r\n\r\n  function imageHeight(img) {\r\n    return new nodes.Unit(imageDimensions(img)[1]);\r\n  }\r\n\r\n  stylus(str)\r\n    .set('filename', 'js-functions.styl')\r\n    .define('add', add)\r\n    .define('sub', sub)\r\n    .define('image-width', imageWidth)\r\n    .define('image-height', imageHeight)\r\n    .render(function(err, css){\r\n      if (err) throw err;\r\n      console.log(css);\r\n    });\r\n</code></pre></div><p>For further reference (until documentation is complete) please see the following files:</p><ul><li><code class=\"highlighter-rouge\">lib/nodes/*</code></li><li><code class=\"highlighter-rouge\">lib/utils.js</code></li></ul><h2 id=\"usefn\">.use(fn)</h2><p>When called, the given <code class=\"highlighter-rouge\">fn</code> is invoked with the renderer, allowing all of the methods above to be used. This allows for plugins to easily expose themselves, defining functions, paths etc.</p><div><pre><code>var mylib = function(style){\r\n  style.define('add', add);\r\n  style.define('sub', sub);\r\n};\r\n\r\nstylus(str)\r\n  .use(mylib)\r\n  .render(...)\r\n</code></pre></div><p>When calling the <code class=\"highlighter-rouge\">render()</code> method with options, the <code class=\"highlighter-rouge\">use</code> option can be given a function or array of functions to be invoked with the renderer.</p><div><pre><code>stylus.render(str, { use: mylib }, function(err, css){\r\n  if (err) throw err;\r\n  console.log(css);\r\n});\r\n</code></pre></div><h2 id=\"deps\">.deps()</h2><p>Returns array of dependencies (import files):</p><div><pre><code>  stylus('@import \"a\"; @import \"b\"')\r\n    .deps();\r\n\r\n  // =&gt; ['a.styl', 'b.styl']\r\n</code></pre></div><h2 id=\"stylusresolveroptions\">stylus.resolver([options])</h2><p>Optional built-in function which may be used to resolve relative urls inside imported files:</p><div><pre><code>  stylus(str)\r\n    .define('url', stylus.resolver())\r\n    .render(function(err, css) {\r\n\r\n    });\r\n</code></pre></div><p>Options:</p><ul><li><code class=\"highlighter-rouge\">paths</code> additional resolution path(s)</li><li><code class=\"highlighter-rouge\">nocheck</code> don’t check file existence</li></ul></div>\r\n"}