{"iteration":"<div class=\"docs\"><h1>Iteration</h1><p>Stylus allows you to iterate expressions via the <code class=\"highlighter-rouge\">for/in</code> construct, taking the form of:</p><div><pre><code>  for &lt;val-name&gt; [, &lt;key-name&gt;] in &lt;expression&gt;\r\n</code></pre></div><p>For example:</p><div><pre><code>body\r\n  for num in 1 2 3\r\n    foo num\r\n</code></pre></div><p>Yields:</p><div><pre><code>  body {\r\n    foo: 1;\r\n    foo: 2;\r\n    foo: 3;\r\n  }\r\n</code></pre></div><p>The example below shows how to use the <code class=\"highlighter-rouge\">&lt;key-name&gt;</code>:</p><div><pre><code>  body\r\n    fonts = Impact Arial sans-serif\r\n    for font, i in fonts\r\n      foo i font\r\n</code></pre></div><p>Yielding:</p><div><pre><code>    body {\r\n      foo: 0 Impact;\r\n      foo: 1 Arial;\r\n      foo: 2 sans-serif;\r\n    }\r\n</code></pre></div><p>And hereâ€™s how you do a regular for loop</p><div><pre><code>body\r\n  for num in (1..5)\r\n    foo num\r\n</code></pre></div><p>Yields:</p><div><pre><code>body {\r\n  foo: 1;\r\n  foo: 2;\r\n  foo: 3;\r\n  foo: 4;\r\n  foo: 5;\r\n}\r\n</code></pre></div><h2 id=\"mixins\">Mixins</h2><p>We can use iteration within mixins to produce powerful functionality. For example, we can apply expression pairs as properties using interpolation and iteration.</p><p>Below we define <code class=\"highlighter-rouge\">apply()</code>, conditionally utilizing all the <code class=\"highlighter-rouge\">arguments</code> so that comma-delimited <em>and</em> expression lists are supported:</p><div><pre><code> apply(props)\r\n   props = arguments if length(arguments) &gt; 1\r\n   for prop in props\r\n     {prop[0]} prop[1]\r\n\r\n body\r\n   apply(one 1, two 2, three 3)\r\n\r\n body\r\n   list = (one 1) (two 2) (three 3)\r\n   apply(list)\r\n</code></pre></div><h2 id=\"functions\">Functions</h2><p>Stylus functions may also contain for-loops. Below are some example use-cases:</p><p>Sum:</p><div><pre><code>  sum(nums)\r\n    sum = 0\r\n    for n in nums\r\n      sum += n\r\n\r\n  sum(1 2 3)\r\n  // =&gt; 6\r\n</code></pre></div><p>join:</p><div><pre><code>  join(delim, args)\r\n    buf = ''\r\n    for arg, index in args\r\n      if index\r\n        buf += delim + arg\r\n      else\r\n        buf += arg\r\n\r\n  join(', ', foo bar baz)\r\n  // =&gt; \"foo, bar, baz\"\r\n</code></pre></div><h2 id=\"postfix\">Postfix</h2><p>Much like <code class=\"highlighter-rouge\">if</code> / <code class=\"highlighter-rouge\">unless</code> may be utilized post-statement, the same can be done with <code class=\"highlighter-rouge\">for</code>. Below are the same examples as above utilizing the postfix syntax:</p><div><pre><code>   sum(nums)\r\n     sum = 0\r\n     sum += n for n in nums\r\n\r\n\r\n   join(delim, args)\r\n     buf = ''\r\n     buf += i ? delim + arg : arg for arg, i in args\r\n</code></pre></div><p>We can also <strong>return</strong> from within a loop, below is an example returning the number when <code class=\"highlighter-rouge\">n % 2 == 0</code> evaluates to <strong>true</strong>.</p><div><pre><code> first-even(nums)\r\n   return n if n % 2 == 0 for n in nums\r\n\r\n first-even(1 3 5 5 6 3 2)\r\n // =&gt; 6\r\n</code></pre></div></div>"}