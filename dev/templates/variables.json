{"variables":"<div class=\"docs\"><h1>Variables</h1><p>We may assign expressions to variables and use them throughout our stylesheet:</p><div><pre><code> font-size = 14px\r\n\r\n body\r\n   font font-size Arial, sans-serif\r\n</code></pre></div><p>Compiles to:</p><div><pre><code> body {\r\n   font: 14px Arial, sans-serif;\r\n }\r\n</code></pre></div><p>Variables can even consist of an expression list:</p><div><pre><code>font-size = 14px\r\nfont = font-size \"Lucida Grande\", Arial\r\n\r\nbody\r\n  font font, sans-serif\r\n</code></pre></div><p>Compiles to:</p><div><pre><code>body {\r\n  font: 14px \"Lucida Grande\", Arial, sans-serif;\r\n}\r\n</code></pre></div><p>Identifiers (variable names, functions, etc.) may also include the <code class=\"highlighter-rouge\">$</code> character. For example:</p><div><pre><code>$font-size = 14px\r\nbody {\r\n  font: $font-size sans-serif;\r\n}\r\n</code></pre></div><h2 id=\"property-lookup\">Property Lookup</h2><p>Another cool feature unique to Stylus is the ability to reference properties defined <em>without</em> assigning their values to variables. A great example of this is the logic required for vertically and horizontally center an element (typically done using percentages and negative margins, as follows):</p><div><pre><code> #logo\r\n   position: absolute\r\n   top: 50%\r\n   left: 50%\r\n   width: w = 150px\r\n   height: h = 80px\r\n   margin-left: -(w / 2)\r\n   margin-top: -(h / 2)\r\n</code></pre></div><p>Instead of assigning the variables <code class=\"highlighter-rouge\">w</code> and <code class=\"highlighter-rouge\">h</code>, we can simply prepend the <code class=\"highlighter-rouge\">@</code> character to the property name to access the value:</p><div><pre><code> #logo\r\n   position: absolute\r\n   top: 50%\r\n   left: 50%\r\n   width: 150px\r\n   height: 80px\r\n   margin-left: -(@width / 2)\r\n   margin-top: -(@height / 2)\r\n</code></pre></div><p>Another use-case is conditionally defining properties within mixins based on the existence of others . In the following example, we apply a default <code class=\"highlighter-rouge\">z-index</code> of <code class=\"highlighter-rouge\">1</code>—but <em>only</em> if <code class=\"highlighter-rouge\">z-index</code> was not previously specified:</p><div><pre><code>  position()\r\n    position: arguments\r\n    z-index: 1 unless @z-index\r\n\r\n  #logo\r\n    z-index: 20\r\n    position: absolute\r\n\r\n  #logo2\r\n    position: absolute\r\n</code></pre></div><p>Property lookup will “bubble up” the stack until found, or return <code class=\"highlighter-rouge\">null</code> if the property cannot be resolved. In the following example, <code class=\"highlighter-rouge\">@color</code> will resolve to <code class=\"highlighter-rouge\">blue</code>:</p><div><pre><code>  body\r\n    color: red\r\n    ul\r\n      li\r\n        color: blue\r\n        a\r\n          background-color: @color\r\n</code></pre></div></div>\r\n"}