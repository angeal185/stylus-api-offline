{"extend":"<div class=\"docs\"><h1>@extend</h1><p>The Stylus <strong>@extend</strong> directive is inspired by (and essentially the same as) the SASS Implementation, with few subtle differences. This feature significantly simplifies maintenance of semantic rulesets that inherit from other semantic rulesets.</p><h2 id=\"extending-with-mixins\">“Extending” with mixins</h2><p>Although you can use mixins to achieve a similar effect, this can lead to duplicate CSS. A typical pattern is to define several classes as shown below, then combine them on the element such as “warning message”.</p><p>While this technique works just fine, it’s difficult to maintain.</p><div><pre><code>  .message,\r\n  .warning {\r\n    padding: 10px;\r\n    border: 1px solid #eee;\r\n  }\r\n\r\n  .warning {\r\n    color: #E2E21E;\r\n  }\r\n</code></pre></div><h2 id=\"using-extend\">Using <strong><code class=\"highlighter-rouge\">@extend</code></strong></h2><p>To produce this same output with <strong><code class=\"highlighter-rouge\">@extend</code></strong>, simply pass it the desired selector (note that <code class=\"highlighter-rouge\">@extend</code> and <code class=\"highlighter-rouge\">@extends</code> are equal, one is just an alias of another). Stylus will then append the <code class=\"highlighter-rouge\">.warning</code> selector to the existing <code class=\"highlighter-rouge\">.message</code> ruleset. The <code class=\"highlighter-rouge\">.warning</code> class then inherits properties from <code class=\"highlighter-rouge\">.message</code>.</p><div><pre><code class=\"stylus\">  .message {\r\n    padding: 10px;\r\n    border: 1px solid #eee;\r\n  }\r\n\r\n  .warning {\r\n    @extend .message;\r\n    color: #E2E21E;\r\n  }\r\n</code></pre></div><p>Here’s a more complex example, demonstrating how <strong><code class=\"highlighter-rouge\">@extend</code></strong> cascades:</p><div><pre><code>  red = #E33E1E\r\n  yellow = #E2E21E\r\n\r\n  .message\r\n    padding: 10px\r\n    font: 14px Helvetica\r\n    border: 1px solid #eee\r\n\r\n  .warning\r\n    @extends .message\r\n    border-color: yellow\r\n    background: yellow + 70%\r\n\r\n  .error\r\n    @extends .message\r\n    border-color: red\r\n    background: red + 70%\r\n\r\n  .fatal\r\n    @extends .error\r\n    font-weight: bold\r\n    color: red\r\n</code></pre></div><p>Yielding the following CSS:</p><div><pre><code>  .message,\r\n  .warning,\r\n  .error,\r\n  .fatal {\r\n    padding: 10px;\r\n    font: 14px Helvetica;\r\n    border: 1px solid #eee;\r\n  }\r\n  .warning {\r\n    border-color: #e2e21e;\r\n    background: #f6f6bc;\r\n  }\r\n  .error,\r\n  .fatal {\r\n    border-color: #e33e1e;\r\n    background: #f7c5bc;\r\n  }\r\n  .fatal {\r\n    font-weight: bold;\r\n    color: #e33e1e;\r\n  }\r\n</code></pre></div><p>Where Stylus currently differs from SASS is, SASS won’t allow <strong><code class=\"highlighter-rouge\">@extend</code></strong> nested selectors:</p><div><pre><code> form\r\n   button\r\n     padding: 10px\r\n\r\n a.button\r\n   @extend form button\r\n Syntax error: Can't extend form button: can't extend nested selectors\r\n         on line 6 of standard input\r\n   Use --trace for backtrace.\r\n</code></pre></div><p>With Stylus, as long as the selectors match, it works!</p><div><pre><code>   form\r\n     input[type=text]\r\n       padding: 5px\r\n       border: 1px solid #eee\r\n       color: #ddd\r\n\r\n   textarea\r\n     @extends form input[type=text]\r\n     padding: 10px\r\n</code></pre></div><p>Yielding:</p><div><pre><code>    form input[type=text],\r\n    textarea {\r\n      padding: 5px;\r\n      border: 1px solid #eee;\r\n      color: #ddd;\r\n    }\r\n    textarea {\r\n      padding: 10px;\r\n    }\r\n</code></pre></div><h2 id=\"extending-multiple-selectors\">Extending multiple selectors</h2><p>Stylus allows you to extend multiple selectors at once, just write them with the comma:</p><div><pre><code>.a\r\n  color: red\r\n\r\n.b\r\n  width: 100px\r\n\r\n.c\r\n  @extend .a, .b\r\n  height: 200px\r\n</code></pre></div><p>Yielding:</p><div><pre><code>.a,\r\n.c {\r\n  color: #f00;\r\n}\r\n.b,\r\n.c {\r\n  width: 100px;\r\n}\r\n.c {\r\n  height: 200px;\r\n}\r\n</code></pre></div><h2 id=\"extending-placeholder-selectors\">Extending placeholder selectors</h2><p>Stylus has a feature similar to the one in Sass — placeholder selectors.</p><p>Those selectors should start with a <code class=\"highlighter-rouge\">$</code> symbol (for example, <code class=\"highlighter-rouge\">$foo</code>), and are not yielded in the resulting CSS. But you can still extend them:</p><div><pre><code>$foo\r\n  color: #FFF\r\n\r\n$foo2\r\n  color: red\r\n\r\n.bar\r\n  background: #000\r\n  @extends $foo\r\n\r\n.baz\r\n  @extends $foo\r\n</code></pre></div><p>Yielding:</p><div><pre><code>.bar,\r\n.baz {\r\n  color: #fff;\r\n}\r\n.bar {\r\n  background: #000;\r\n}\r\n</code></pre></div><p>Note that if the selector is not extended, it won’t be in the resulting CSS, so it’s a powerful way to create a library of extendable code. While you can insert code through mixins, they would insert the same code every time you use them, while extending placeholders would give you compact output.</p><h2 id=\"optional-extending\">Optional extending</h2><p>Sometimes it might be usefull to be able to extend something that might exists or not depending on the context. You can suffix any selector by <code class=\"highlighter-rouge\">!optional</code> to achieve this:</p><div><pre><code>$specialDesign\r\n  color: #FFF\r\n\r\n.btn\r\n  @extend .design !optional, $specialDesign !optional\r\n</code></pre></div><p>Yielding:</p><div><pre><code>.btn {\r\n  color: #fff;\r\n}\r\n</code></pre></div></div>\r\n"}