{"hashes":"<div class=\"docs\"><h1>Hashes</h1><p>In <code class=\"highlighter-rouge\">0.39.0</code> version Stylus got hash objects.</p><h2 id=\"define\">Define</h2><p>You can define a hash using the curly braces and colons to divide the keys and values:</p><div><pre><code class=\"js\">foo = {\r\n  bar: baz,\r\n  baz: raz\r\n}\r\n</code></pre></div><p>the keys should be either proper idents or strings:</p><div><pre><code>foo = {\r\n  bar: baz,\r\n  'baz': raz,\r\n  '0': raz\r\n}\r\n</code></pre></div><p>When you already have a hash, you can set its values using brackets and strings inside:</p><div><pre><code>foo = {}\r\nfoo['bar'] = baz\r\nfoo['baz'] = raz\r\n</code></pre></div><p>Note that while you canâ€™t use variables or interpolations in curly braces defines, you can use variables inside brackets:</p><div><pre><code>foo = {}\r\nbar = 'baz'\r\nfoo[bar] = raz\r\n\r\nfoo.baz\r\n// =&gt; raz\r\n</code></pre></div><h2 id=\"getters\">Getters</h2><p>For retrieving values from hashes you can use the dot for idents:</p><div><pre><code>foo = { bar: \"baz\" }\r\n\r\nfoo.bar\r\n// =&gt; \"baz\"\r\n</code></pre></div><p>Or brackets with strings for anything:</p><div><pre><code>foo = { \"%\": 10 }\r\nbaz = \"%\"\r\n\r\nfoo[baz]\r\n// =&gt; 10\r\n</code></pre></div><p>You can use any combinations you want:</p><div><pre><code>foo = {\r\n  bar: {\r\n    baz: {\r\n      raz: 10px\r\n    }\r\n  }\r\n}\r\n\r\nqux = \"raz\"\r\nfoo[\"bar\"].baz[qux]\r\n// =&gt; 10px\r\n</code></pre></div><h2 id=\"interpolation\">Interpolation</h2><p>Hashes used inside an interpolation would output the content of the hashes as CSS (without almost any Stylus features though):</p><div><pre><code>foo = {\r\n  width: 10px,\r\n  height: 20px,\r\n  '&amp;:hover': {\r\n    padding: 0\r\n\r\n  }\r\n}\r\n\r\n.bar\r\n  {foo}\r\n\r\n// =&gt; .bar {\r\n//      width: 10px;\r\n//      height: 20px;\r\n//    }\r\n//    .bar:hover {\r\n//      padding: 0;\r\n//    }\r\n</code></pre></div><h2 id=\"other-stuff\">Other stuff</h2><p>You can use other normal Stylus stuff with hashes, like <code class=\"highlighter-rouge\">length()</code>:</p><div><pre><code>foo = { bar: 'a', baz: 'b' }\r\n\r\nlength(foo)\r\n// =&gt; 2\r\n</code></pre></div><p>You can iterate through hashes with optional key param:</p><div><pre><code>foo = { width: 10px, height: 20px }\r\n\r\nfor key, value in foo\r\n  {key}: value\r\n\r\n// =&gt; width: 10px;\r\n//    height: 20px;\r\n</code></pre></div><p>You can check existence of a key in hash using <code class=\"highlighter-rouge\">in</code>:</p><div><pre><code>foo = { bar: 10px}\r\n\r\nbar in foo\r\n// =&gt; true\r\n\r\nbaz in foo\r\n// =&gt; false\r\n</code></pre></div><p>You can get keys or values of the hash using corresponding bifs:</p><div><pre><code>foo = { bar: 'a', baz: 'b' }\r\n\r\nkeys(foo)\r\n// =&gt; 'bar' 'baz'\r\n\r\nvalues(foo)\r\n// =&gt; 'a' 'b'\r\n</code></pre></div><p>You can remove a key from the hash using <code class=\"highlighter-rouge\">remove</code> bif:</p><div><pre><code>obj = { foo: 1, bar: 2 }\r\nremove(obj, 'foo')\r\n// =&gt; {\"bar\":\"(2)\"}\r\n</code></pre></div><p>And you can use <code class=\"highlighter-rouge\">merge</code> (aliased as <code class=\"highlighter-rouge\">extend</code>) to merge hashes:</p><div><pre><code>obj = {\r\n  foo: 'foo'\r\n  bar: 'bar'\r\n}\r\n\r\nobj2 = {\r\n  baz: 'baz'\r\n}\r\n\r\nmerge(obj, obj2)\r\n// =&gt; {\"foo\":\"('foo')\",\"bar\":\"('bar')\",\"baz\":\"('baz')\"}\r\n</code></pre></div></div>\r\n"}