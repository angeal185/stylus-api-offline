{"import":"<div class=\"docs\"><h1>@import and @require</h1><p>Stylus supports both literal <strong>@import</strong> for CSS, as well as dynamic importing or requiring of other Stylus sheets.</p><h2 id=\"literal-css\">Literal CSS</h2><p>Any filename with the extension <code class=\"highlighter-rouge\">.css</code> will become a literal. For example:</p><div><pre><code> @import \"reset.css\"\r\n</code></pre></div><p>Render the literal CSS <strong>@import</strong> shown below:</p><div><pre><code> @import \"reset.css\"\r\n</code></pre></div><h2 id=\"stylus-import\">Stylus Import</h2><p><em>Disclaimer: In all places the <strong>@import</strong> is used with Stylus sheets, the <strong>@require</strong> could be used</em></p><p>When using <strong>@import</strong> without the <code class=\"highlighter-rouge\">.css</code> extension, it’s assumed to be a Stylus sheet (e.g., <code class=\"highlighter-rouge\">@import \"mixins/border-radius\"</code>).</p><p><strong>@import</strong> works by iterating an array of directories, and checking if this file lives in any of them (similar to node’s <code class=\"highlighter-rouge\">require.paths</code>). This array defaults to a single path, which is derived from the <code class=\"highlighter-rouge\">filename</code> option’s <code class=\"highlighter-rouge\">dirname</code>. So, if your filename is <code class=\"highlighter-rouge\">/tmp/testing/stylus/main.styl</code>, then import will look in <code class=\"highlighter-rouge\">/tmp/testing/stylus/</code>.</p><p><strong>@import</strong> also supports index styles. This means when you <code class=\"highlighter-rouge\">@import blueprint</code>, it will resolve <strong>either</strong> <code class=\"highlighter-rouge\">blueprint.styl</code> <strong>or</strong> <code class=\"highlighter-rouge\">blueprint/index.styl</code>. This is really useful for libraries that want to expose all their features, while still allowing feature subsets to be imported.</p><p>For example, a common lib structure might be:</p><div><pre><code>./tablet\r\n  |-- index.styl\r\n  |-- vendor.styl\r\n  |-- buttons.styl\r\n  |-- images.styl\r\n</code></pre></div><p>In the example below, we set the <code class=\"highlighter-rouge\">paths</code> options to provide additional paths to Stylus. Within <code class=\"highlighter-rouge\">./test.styl</code>, we could then <code class=\"highlighter-rouge\">@import \"mixins/border-radius\"</code>, or <code class=\"highlighter-rouge\">@import \"border-radius\"</code> (since <code class=\"highlighter-rouge\">./mixins</code> is exposed to Stylus).</p><div><pre><code>  /**\r\n   * Module dependencies.\r\n   */\r\n\r\n  var stylus = require('../')\r\n    , str = require('fs').readFileSync(__dirname + '/test.styl', 'utf8');\r\n\r\n  var paths = [\r\n      __dirname\r\n    , __dirname + '/mixins'\r\n  ];\r\n\r\n  stylus(str)\r\n    .set('filename', __dirname + '/test.styl')\r\n    .set('paths', paths)\r\n    .render(function(err, css){\r\n      if (err) throw err;\r\n      console.log(css);\r\n    });\r\n</code></pre></div><h2 id=\"require\">Require</h2><p>Along with <code class=\"highlighter-rouge\">@import</code>, Stylus also has <code class=\"highlighter-rouge\">@require</code>. It works almost in the same way, with the exception of importing any given file only once.</p><h2 id=\"block-level-import\">Block-level import</h2><p>Stylus supports block-level import. It means that you can use <code class=\"highlighter-rouge\">@import</code> not only at root level, but also nested inside other selectors or at-rules.</p><p>If you have a <code class=\"highlighter-rouge\">bar.styl</code> with this code:</p><div><pre><code>.bar\r\n  width: 10px;\r\n</code></pre></div><p>Then you can import it inside a <code class=\"highlighter-rouge\">foo.styl</code> like this:</p><div><pre><code>.foo\r\n  @import 'bar.styl'\r\n\r\n@media screen and (min-width: 640px)\r\n  @import 'bar.styl'\r\n</code></pre></div><p>And you’ll get this compiled CSS as a result:</p><div><pre><code>.foo .bar {\r\n  width: 10px;\r\n}\r\n@media screen and (min-width: 640px) {\r\n  .bar {\r\n    width: 10px;\r\n  }\r\n}\r\n</code></pre></div><h2 id=\"file-globbing\">File globbing</h2><p>Stylus supports globbing. With it you could import many files using a file mask:</p><div><pre><code>@import 'product/*'\r\n</code></pre></div><p>This would import all the stylus sheets from the <code class=\"highlighter-rouge\">product</code> directory in such structure:</p><div><pre><code>./product\r\n  |-- body.styl\r\n  |-- foot.styl\r\n  |-- head.styl\r\n</code></pre></div><p>Note that this works with <code class=\"highlighter-rouge\">@require</code> too, so if you would have also a <code class=\"highlighter-rouge\">./product/index.styl</code> with this content:</p><div><pre><code>@require 'head'\r\n@require 'body'\r\n@require 'foot'\r\n</code></pre></div><p>then <code class=\"highlighter-rouge\">@require 'product/*'</code> would include each individual sheet only once.</p><h2 id=\"resolving-relative-urls-inside-imports\">Resolving relative urls inside imports</h2><p>By default Stylus doesn’t resolve the urls in imported <code class=\"highlighter-rouge\">.styl</code> files, so if you’d happen to have a <code class=\"highlighter-rouge\">foo.styl</code> with <code class=\"highlighter-rouge\">@import \"bar/bar.styl\"</code> which would have <code class=\"highlighter-rouge\">url(\"baz.png\")</code>, it would be <code class=\"highlighter-rouge\">url(\"baz.png\")</code> too in a resulting CSS.</p><p>But you can alter this behavior by using <code class=\"highlighter-rouge\">--resolve-url</code> (or just <code class=\"highlighter-rouge\">-r</code>) CLI option to get <code class=\"highlighter-rouge\">url(\"bar/baz.png\")</code> in your resulting CSS.</p><h2 id=\"javascript-import-api\">JavaScript Import API</h2><p>When using the <code class=\"highlighter-rouge\">.import(path)</code> method, these imports are deferred until evaluation:</p><div><pre><code>   var stylus = require('../')\r\n     , str = require('fs').readFileSync(__dirname + '/test.styl', 'utf8');\r\n\r\n   stylus(str)\r\n     .set('filename', __dirname + '/test.styl')\r\n     .import('mixins/vendor')\r\n     .render(function(err, css){\r\n     if (err) throw err;\r\n     console.log(css);\r\n   });\r\n</code></pre></div><p>The following statement…</p><div><pre><code> @import 'mixins/vendor'\r\n</code></pre></div><p>…is equivalent to…</p><div><pre><code> .import('mixins/vendor')\r\n</code></pre></div></div>\r\n"}