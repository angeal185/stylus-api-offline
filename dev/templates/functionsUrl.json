{"functionsUrl":"<div class=\"docs\"><h1>url()</h1><h2 id=\"data-uri-image-inlining\">Data URI Image Inlining</h2><p>Stylus is bundled with an optional function named <code class=\"highlighter-rouge\">url()</code>, which replaces the literal <code class=\"highlighter-rouge\">url()</code> calls (and conditionally inlines them using base64 Data URIs).</p><h2 id=\"example\">Example</h2><p>The function itself is available via <code class=\"highlighter-rouge\">require('stylus').url</code>. It accepts an <code class=\"highlighter-rouge\">options</code> object, returning a function that Stylus calls internally when it sees <code class=\"highlighter-rouge\">url()</code>.</p><p>The <code class=\"highlighter-rouge\">.define(name, callback)</code> method assigned a JavaScript function that can be called from Stylus source. In this case, since our images are in <code class=\"highlighter-rouge\">./css/images</code>, we can ignore the <code class=\"highlighter-rouge\">paths</code> option (by default image lookups are performed relative to the file being rendered). But if desired, this behavior can be altered:</p><div><pre><code>stylus(str)\r\n  .set('filename', __dirname + '/css/test.styl')\r\n  .define('url', stylus.url())\r\n  .render(function(err, css){\r\n    // render it\r\n  });\r\n</code></pre></div><p>For example, imagine our images live in <code class=\"highlighter-rouge\">./public/images</code>. We want to use <code class=\"highlighter-rouge\">url(images/tobi.png)</code>. We could pass <code class=\"highlighter-rouge\">paths</code> our public directory, so that it becomes part of the lookup process.</p><p>Likewise, if instead we wanted <code class=\"highlighter-rouge\">url(tobi.png)</code>, we could pass <code class=\"highlighter-rouge\">paths: [__dirname + '/public/images']</code>.</p><div><pre><code>stylus(str)\r\n  .set('filename', __dirname + '/css/test.styl')\r\n  .define('url', stylus.url({ paths: [__dirname + '/public'] }))\r\n  .render(function(err, css){\r\n    // render it\r\n  });\r\n</code></pre></div><h3 id=\"utf8-encoding-for-svgs\"><code class=\"highlighter-rouge\">utf8</code> encoding for SVGs</h3><p>Since base64 encoding an image actually increases the original size, you have the option to use <code class=\"highlighter-rouge\">utf8</code> encoding when inlining SVGs.</p><p>There is a bif for this: <code class=\"highlighter-rouge\">embedurl</code>:</p><div><pre><code>.embed-with-utf8 {\r\n  background-image: embedurl(\"circle.svg\", \"utf8\");\r\n}\r\n</code></pre></div><p>Would result in utf-encoded inline SVG instead of base64 one.</p><p>If you’d like to use the JS define so you could use the <code class=\"highlighter-rouge\">paths</code> alongside the utf encoding, you’ll need to define it using another name, not <code class=\"highlighter-rouge\">url()</code>. This is Due to how <code class=\"highlighter-rouge\">url()</code> function is parsed in Stylus: it is impossible now to pass the extra param to it, so you couldn’t just call <code class=\"highlighter-rouge\">url</code> with the second param to set the encoding. But if you’d define the <code class=\"highlighter-rouge\">url</code> with another name:</p><div><pre><code>stylus(str)\r\n  .set('filename', __dirname + '/css/test.styl')\r\n  .define('inline-url', stylus.url({ paths: [__dirname + '/public'] }))\r\n  .render(function(err, css){\r\n    // render it\r\n  });\r\n</code></pre></div><p>You could then use <code class=\"highlighter-rouge\">inline-url</code> bif just like you can use <code class=\"highlighter-rouge\">embedurl</code>, but with an added <code class=\"highlighter-rouge\">paths</code> functionality:</p><div><pre><code>.embed-with-utf8-at-path {\r\n  background-image: inline-url(\"tobi.svg\", \"utf8\");\r\n}\r\n</code></pre></div><h2 id=\"options\">Options</h2><ul><li><code class=\"highlighter-rouge\">limit</code> bytesize limit defaulting to 30Kb (30000), use <code class=\"highlighter-rouge\">false</code> to disable the limit</li><li><code class=\"highlighter-rouge\">paths</code> image resolution path(s)</li></ul></div>\r\n"}